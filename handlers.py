# rozy-gateway-bot/handlers.py (Final with Corrected Button Handler)

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.error import BadRequest

# config ‡§î‡§∞ database ‡§∏‡•á ‡•õ‡§∞‡•Ç‡§∞‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
from config import WORKER_BOT_USERNAME, ADMIN_IDS, FORCE_SUB_CHANNELS, MAIN_CHANNEL_LINK
from database import generate_secure_token, add_user

logger = logging.getLogger(__name__)

# --- ‡§π‡•á‡§≤‡•ç‡§™‡§∞ ‡§´‡§Ç‡§ï‡•ç‡§∂‡§®‡•ç‡§∏ ---
async def is_user_member(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if user_id in ADMIN_IDS: return True
    for channel in FORCE_SUB_CHANNELS:
        try:
            member = await context.bot.get_chat_member(chat_id=channel["chat_id"], user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']: return False
        except BadRequest:
            logger.warning(f"Failed to check membership for user {user_id}. Is bot an admin in chat {channel['chat_id']}?")
            return False
    return True

async def send_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_key = context.user_data.get('file_key')
    if not file_key: return
    join_buttons = [InlineKeyboardButton(ch["name"], url=ch["invite_link"]) for ch in FORCE_SUB_CHANNELS]
    keyboard = [join_buttons, [InlineKeyboardButton("‚úÖ Joined", callback_data=f"check_{file_key}")]]
    await update.message.reply_text("Please join our channels first.", reply_markup=InlineKeyboardMarkup(keyboard))

async def send_download_options(chat_id: int, context: ContextTypes.DEFAULT_TYPE, file_key: str):
    keyboard = [
        [InlineKeyboardButton("üéÄ Download üéÄ", callback_data=f"getlink_{file_key}")],
        [InlineKeyboardButton("Tutorial", url="https://t.me/your_tutorial_link")],
        [InlineKeyboardButton("Premium", url="https://t.me/your_premium_link")]
    ]
    await context.bot.send_message(chat_id=chat_id, text="Click On Download Button", reply_markup=InlineKeyboardMarkup(keyboard))

# --- ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id)
    
    if context.args:
        file_key = context.args[0]
        context.user_data['file_key'] = file_key
        if await is_user_member(user.id, context):
            await send_download_options(user.id, context, file_key)
        else:
            await send_join_request(update, context)
    else:
        keyboard = [[InlineKeyboardButton("üöÄ Go to Main Channel üöÄ", url=MAIN_CHANNEL_LINK)]]
        await update.message.reply_text("Welcome! Please use a link from our main channel.", reply_markup=InlineKeyboardMarkup(keyboard))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    data = query.data
    
    # --- ‡§ö‡•á‡§ï ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
    if data.startswith("check_"):
        file_key = context.user_data.get('file_key')
        if not file_key:
            await query.answer("Something went wrong, please try the main link again.", show_alert=True)
            return

        # ‡§™‡§π‡§≤‡•á ‡§Æ‡•á‡§Ç‡§¨‡§∞‡§∂‡§ø‡§™ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
        if await is_user_member(user.id, context):
            # ‡§Ö‡§ó‡§∞ ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç
            await query.answer()
            await query.message.delete()
            await send_download_options(user.id, context, file_key)
        else:
            # ‡§Ö‡§ó‡§∞ ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§™‡•â‡§™-‡§Ö‡§™ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§µ‡§æ‡§≤‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
            await query.answer("You haven't joined all channels yet. Please try again.", show_alert=True)
            
    # --- ‡§ó‡•á‡§ü ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ---
    elif data.startswith("getlink_"):
        await query.answer()
        file_key = data.split("_", 1)[1]
        token = generate_secure_token(file_key, user.id)
        if token:
            url = f"https://t.me/{WORKER_BOT_USERNAME}?start={token}"
            await query.message.edit_text(f"BELOW IS YOUR LINK:\n\n`{url}`", parse_mode="MarkdownV2")
        else:
            await query.message.edit_text("Sorry, could not generate link.")
    
    # --- ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§¨‡§ü‡§® ‡§π‡•à ‡§§‡•ã ---
    else:
        # ‡§è‡§ï ‡§ñ‡§æ‡§≤‡•Ä ‡§ú‡§µ‡§æ‡§¨ ‡§≠‡•á‡§ú‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§π‡•ã ‡§ú‡§æ‡§è
        await query.answer()

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
